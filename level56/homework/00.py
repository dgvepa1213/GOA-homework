def reverse_seq(n):
    return list(range(n, 0, -1))



#ახსნა
#range ქმნის რიცხვების რიგს.
#n - იწყებს რიგს რიცხვით n.
#0 - ნიშნავს, რომ რიგი შეწყდება 0-მდე (არ ჩათვლის 0-ს).
#-1 - გულისხმობს, რომ თითო ნაბიჯზე რიცხვი 1-ით შემცირდება.
#ასე რომ, list(range(n, 0, -1)) აბრუნებს range-ში მყოფ რიცხვებს სიად.
#return ეს ხაზს ნიშნავს, რომ ფუნქცია აბრუნებს შექმნილ სიას.



def say_hello(name):
    return "Hello " + name


#ახსნა:


#ეს განსაზღვრავს ფუნქციას სახელად say_hello, რომელსაც ერთი არგუმენტი, name, გადაეცემა.

#name არის ის მნიშვნელობა (სტრიქონი), რომლის გამოყენებით ფუნქცია მისასალმებელ მესიჯს შექმნის.

##return "Hello " + name
#ფუნქცია აბრუნებს სტრიქონს, რომელიც შედგება ტექსტ "Hello " და name-ის კომბინაციისგან.
#მაგალითი: თუ ფუნქციას გადავცემთ name = "Alice", return დააბრუნებს "Hello Alice".






def array_plus_array(arr1, arr2):
    return sum(arr1) + sum(arr2)


#sum(arr1) და sum(arr2)

#sum(arr1) ითვლის სიის (arr1) ყველა ელემენტის ჯამს.
#sum(arr2) ითვლის სიის (arr2) ყველა ელემენტის ჯამს.
#return sum(arr1) + sum(arr2)

#ფუნქცია აბრუნებს ორივე მასივის ელემენტების ჯამებს.





def monkey_count(n):
    return list(range(1, n + 1))


#range(1, n + 1):

#range ფუნქცია ქმნის რიცხვების რიგს.
#აქ იწყება 1-დან და მთავრდება 
#𝑛
#+
#1
#n+1-ზე (მაგრამ 
#𝑛
#+
#1
#n+1 არ შედის სიაში).
#სე რომ, სია იქნება 1-დან 
#𝑛
#n-მდე.
#list():

#range-ით შექმნილი რიცხვების რიგი არ არის სია, ის არის სპეციალური ობიექტი.
#list(range(...)) გარდაქმნის მას სიის სახით.
#return:

#ფუნქცია აბრუნებს სიას, რომელიც შეიცავს ყველა რიცხვს 1-დან 
#𝑛
#n-მდე.










